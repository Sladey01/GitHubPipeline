name: Snyk Code Analysis Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  snyk-code-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        pip install requests
        
    - name: Run Snyk Code Analysis
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        ORG_ID: c0fc1ca8-d601-4c4e-b7f7-19201c5dac82
      run: |
        cat > snyk_code_scan.py << 'EOF'
        import base64
        import json
        import os
        import time
        import requests
        from pathlib import Path

        def encode_file(file_path):
            with open(file_path, 'rb') as f:
                return base64.b64encode(f.read()).decode('utf-8')

        def get_files_to_analyze():
            files = []
            extensions = ['.py', '.js', '.java', '.cs', '.go']
            
            for ext in extensions:
                for file_path in Path('.').rglob(f'*{ext}'):
                    if 'node_modules' not in str(file_path) and '.git' not in str(file_path):
                        files.append({
                            'path': str(file_path),
                            'content': encode_file(file_path)
                        })
            return files

        def create_analysis(org_id, files):
            url = 'https://api.us.snyk.io/v3/graphql'
            headers = {
                'Authorization': f'Bearer {os.environ["SNYK_TOKEN"]}',
                'Content-Type': 'application/json'
            }
            
            query = """
            mutation CreateCodeAnalysis($input: CodeAnalysisInput!) {
              createCodeAnalysis(input: $input) {
                id
                status
                analysisUrl
                errors {
                  message
                }
              }
            }
            """
            
            variables = {
                "input": {
                    "orgId": org_id,
                    "files": files
                }
            }
            
            try:
                print(f"Making request to: {url}")
                print(f"Headers: {headers}")
                print(f"Number of files in payload: {len(files)}")
                
                response = requests.post(url, headers=headers, json={
                    'query': query,
                    'variables': variables
                })
                
                print(f"Response status code: {response.status_code}")
                print(f"Response headers: {response.headers}")
                print(f"Response text: {response.text}")
                
                response.raise_for_status()
                
                if response.text:
                    return response.json()
                else:
                    print("Empty response received")
                    return None
                    
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}")
                if hasattr(e.response, 'text'):
                    print(f"Error response: {e.response.text}")
                raise

        def check_analysis_status(analysis_id):
            url = 'https://api.snyk.io/v3/graphql'
            headers = {
                'Authorization': f'Bearer {os.environ["SNYK_TOKEN"]}',
                'Content-Type': 'application/json'
            }
            
            query = """
            query CheckAnalysis($id: ID!) {
              codeAnalysis(id: $id) {
                status
                results {
                  issues {
                    nodes {
                      severity
                      title
                    }
                  }
                }
              }
            }
            """
            
            try:
                response = requests.post(url, headers=headers, json={
                    'query': query,
                    'variables': {'id': analysis_id}
                })
                response.raise_for_status()
                return response.json()
            except Exception as e:
                print(f"Error checking status: {e}")
                if hasattr(e.response, 'text'):
                    print(f"Error response: {e.response.text}")
                raise

        def main():
            print("Collecting files for analysis...")
            files = get_files_to_analyze()
            print(f"Found {len(files)} files to analyze")
            
            if not files:
                print("No files found to analyze")
                return
            
            print("Creating Snyk Code analysis...")
            print(f"Using org ID: {os.environ['ORG_ID']}")
            
            result = create_analysis(os.environ['ORG_ID'], files)
            
            if not result:
                print("No result from create_analysis")
                exit(1)
            
            print(f"Analysis result: {json.dumps(result, indent=2)}")
                
            if 'errors' in result:
                print("Error creating analysis:", result['errors'])
                exit(1)
                
            analysis_id = result.get('data', {}).get('createCodeAnalysis', {}).get('id')
            if not analysis_id:
                print("No analysis ID in response")
                print(f"Full response: {result}")
                exit(1)
                
            print(f"Analysis created with ID: {analysis_id}")
            
            print("Waiting for analysis to complete...")
            max_attempts = 30
            attempt = 0
            
            while attempt < max_attempts:
                status_result = check_analysis_status(analysis_id)
                print(f"Status check result: {json.dumps(status_result, indent=2)}")
                
                if 'errors' in status_result:
                    print("Error checking status:", status_result['errors'])
                    exit(1)
                    
                analysis_data = status_result.get('data', {}).get('codeAnalysis', {})
                status = analysis_data.get('status', 'unknown')
                print(f"Current status: {status}")
                
                if status == 'COMPLETE':
                    issues = analysis_data.get('results', {}).get('issues', {}).get('nodes', [])
                    print("\nAnalysis Results:")
                    print(f"Found {len(issues)} issues")
                    
                    severity_counts = {}
                    for issue in issues:
                        severity = issue.get('severity', 'unknown')
                        severity_counts[severity] = severity_counts.get(severity, 0) + 1
                    
                    print("\nIssues by severity:")
                    for severity, count in severity_counts.items():
                        print(f"{severity}: {count}")
                    
                    if severity_counts.get('critical', 0) > 0 or severity_counts.get('high', 0) > 0:
                        print("\nFailing pipeline due to critical/high severity issues")
                        exit(1)
                        
                    break
                    
                elif status == 'FAILED':
                    print("Analysis failed")
                    exit(1)
                    
                time.sleep(10)
                attempt += 1
            
            if attempt >= max_attempts:
                print("Analysis timed out")
                exit(1)

        if __name__ == '__main__':
            main()
        EOF
        
        python snyk_code_scan.py
